package com.example.kirill.androidclient;

import android.app.PendingIntent;
import android.content.Intent;
import android.content.IntentSender;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.v4.app.FragmentActivity;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.auth.api.signin.GoogleSignInResult;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.SignInButton;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.common.api.OptionalPendingResult;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.Status;

public class LoginActivity extends FragmentActivity implements GoogleApiClient.ConnectionCallbacks,GoogleApiClient.OnConnectionFailedListener,View.OnClickListener {

    private static final int SIGNED_IN = 0;
    private static final int STATE_SIGNING_IN = 1;
    private static final int STATE_IN_PROGRESS = 2;
    private static final int RC_SIGN_IN = 0;

    private GoogleApiClient mGoogleApiClient;
    private int mSignInProgress;
    private PendingIntent mSignInIntent;
    private ConnectionResult mConnectionResult;

    private SignInButton mSignInButton;
    private Button mSignOutButton;
    private Button mRevokeButton;
    private TextView mStatus;

    String login;
    String password;
    SharedPreferences sPref;
    final String SAVED_TEXT = "saved_text";
    private static final String TAG="RootLog";
    //Thread mainThread;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
      //  mainThread=Thread.currentThread();
        Log.d(TAG,this.getClass().getName()+"/onCreate");
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_google);
        mSignInButton = (SignInButton) findViewById(R.id.sign_in_button);
        mSignOutButton = (Button) findViewById(R.id.sign_out_button);
        mRevokeButton = (Button) findViewById(R.id.revoke_access_button);
        mStatus = (TextView) findViewById(R.id.statuslabel);

        mSignInButton.setOnClickListener(this);
        mSignOutButton.setOnClickListener(this);
        mRevokeButton.setOnClickListener(this);

        mGoogleApiClient = buildGoogleApiClient();
    }

    private GoogleApiClient buildGoogleApiClient() {
        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestEmail()
                .build();

// Build a GoogleApiClient with access to GoogleSignIn.API and the options above.
        return new GoogleApiClient.Builder(this)
                .addConnectionCallbacks(this)
                .addOnConnectionFailedListener(this)
                .enableAutoManage(this, this)
                .addApi(Auth.GOOGLE_SIGN_IN_API, gso)
                .build();
    }

    @Override
    public void onConnected(Bundle connectionHint) {
        mSignInButton.setEnabled(true);
        mSignOutButton.setEnabled(false);
        mRevokeButton.setEnabled(false);

        // Indicate that the sign in process is complete.
        mSignInProgress = SIGNED_IN;
        OptionalPendingResult opr = Auth.GoogleSignInApi.silentSignIn(mGoogleApiClient);

        opr.setResultCallback(new ResultCallback<GoogleSignInResult>() {

            @Override
            public void onResult(@NonNull GoogleSignInResult result) {
                if (result.isSuccess()) {
                    try {
                        Log.d(TAG,this.getClass().getName()+"/onResultSetResultCallBack");
                        GoogleSignInAccount account = result.getSignInAccount();

                        mStatus.setText(String.format("Signed In to My App as %s", account.getDisplayName()));
                        mSignInButton.setEnabled(false);
                        mSignOutButton.setEnabled(true);
                        mRevokeButton.setEnabled(true);
                    }
                    catch(Exception ex){
                        String exception = ex.getLocalizedMessage();
                        String exceptionString = ex.toString();
                        // Note that you should log these errors in a ‘real' app to aid in debugging
                    }
                }
            }
        });
    }
    @Override
    public void onConnectionFailed(ConnectionResult result) {
        Log.d(TAG,this.getClass().getName()+"/onConnectionFailed");
        if (mSignInProgress != STATE_IN_PROGRESS) {
            mSignInIntent = result.getResolution();
            if (mSignInProgress == STATE_SIGNING_IN) {
                resolveSignInError();
            }
        }
        // Will implement shortly
        onSignedOut();
    }

    private void resolveSignInError() {
        if (mSignInIntent != null) {
            try {
                mSignInProgress = STATE_IN_PROGRESS;
                mConnectionResult.startResolutionForResult(this, mSignInProgress);
            } catch (IntentSender.SendIntentException e) {
                mSignInProgress = STATE_SIGNING_IN;
                mGoogleApiClient.connect();
            }
        } else {
            // You have a play services error -- inform the user
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        switch (requestCode) {
            case RC_SIGN_IN:
                if (resultCode == RESULT_OK) {
                    mSignInProgress = STATE_SIGNING_IN;
                } else {
                    mSignInProgress = SIGNED_IN;
                }

                if (!mGoogleApiClient.isConnecting()) {
                    mGoogleApiClient.connect();
                }
                break;
        }
    }

    private void onSignedOut() {
        Log.d(TAG,this.getClass().getName()+"/onResultSignOut");
        Auth.GoogleSignInApi.signOut(mGoogleApiClient).setResultCallback(
                new ResultCallback<Status>() {
                    @Override
                    public void onResult(Status status) {
                        Log.d(TAG,this.getClass().getName()+"/onResultSignOut");
                        // Update the UI to reflect that the user is signed out.
                        runOnUiThread(new Runnable(){
                            @Override
                            public void run() {
                                Log.d(TAG,this.getClass().getName()+"/onRunSetText");
                                mStatus.setText("Signed out");
                            }
                        });
                        mSignInButton.setEnabled(true);
                        mSignOutButton.setEnabled(false);
                        mRevokeButton.setEnabled(false);
                    }
                });
    }

    @Override
    public void onClick(View v) {
        if (!mGoogleApiClient.isConnecting()) {
            switch (v.getId()) {
                case R.id.sign_in_button:
                    mStatus.setText("Signing In");
                    Intent signInIntent =
                            Auth.GoogleSignInApi.getSignInIntent(mGoogleApiClient);
                    startActivityForResult(signInIntent, RC_SIGN_IN);
                    break;
                case R.id.sign_out_button:
                    onSignedOut();
                    mGoogleApiClient.disconnect();
                    mGoogleApiClient.connect();
                    break;
                case R.id.revoke_access_button:
                    Log.d(TAG,this.getClass().getName()+"/onRevokeAccessButton");
                    Auth.GoogleSignInApi.revokeAccess(mGoogleApiClient);
                    mGoogleApiClient = buildGoogleApiClient();
                    mGoogleApiClient.connect();
                    break;
            }
        }
    }

    @Override
    protected void onPause() {
        Log.d(TAG,this.getClass().getName()+"/onPause");
        super.onPause();
    }

    @Override
    protected void onResume() {
        Log.d(TAG,this.getClass().getName()+"/onResume");
        super.onResume();
    }

    @Override
    protected void onStart() {
        super.onStart();
        mGoogleApiClient.connect();
    }

    @Override
    protected void onStop() {
        mGoogleApiClient.disconnect();
        super.onStop();
    }

    @Override
    public void onConnectionSuspended(int cause) {
        mGoogleApiClient.connect();
    }

    @Override
    protected void onDestroy() {
        Log.d(TAG,this.getClass().getName()+"/onDestroy");
        super.onDestroy();
    }

    public void onLogin(View view) {
        Log.d(TAG,this.getClass().getName()+"/onLogin");
        login = ((EditText) findViewById(R.id.pltLogin)).getText().toString();
        password = ((EditText) findViewById(R.id.pltPassword)).getText().toString();
        if (login.equals("kirillabaskin") && password.equals("qqqq")) {
            SaveCheck();
            Intent intent = new Intent(this, MainActivity.class);
            startActivity(intent);
        } else {
            Toast.makeText(this, "Не правильный логин или пароль", Toast.LENGTH_SHORT).show();
        }
    }

    private void SaveCheck(){
        Log.d(TAG,this.getClass().getName()+"/SaveCheck");
        sPref = getSharedPreferences("AppPref",MODE_PRIVATE);
        SharedPreferences.Editor ed=sPref.edit();
        ed.putBoolean(SAVED_TEXT,true);
        ed.commit();
    }
    private boolean isCheck(){
        Log.d(TAG,this.getClass().getName()+"/isCheck");
        sPref=getSharedPreferences("AppPref",MODE_PRIVATE);
        return sPref.getBoolean(SAVED_TEXT,false);
    }

    @Override
    public void onBackPressed() {
        Log.d(TAG,this.getClass().getName()+"/onBackPressed");
        Intent intent=new Intent(Intent.ACTION_MAIN);
        intent.addCategory(Intent.CATEGORY_HOME);
        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        startActivity(intent);
    }
}
